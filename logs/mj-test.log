INFO  19:48:19,915 - Compiling source file: D:\Fakultet\PP1\domaci\workspace\MJCompiler\test\assign_op.mj
INFO  19:48:19,941 - #2 program
INFO  19:48:19,942 - #46 MJProgram
INFO  19:48:19,942 - #46 char
INFO  19:48:19,942 - #46 c
INFO  19:48:19,943 - #33 ;
INFO  19:48:19,943 - #46 int
INFO  19:48:19,944 - #46 y
INFO  19:48:19,944 - #33 ;
INFO  19:48:19,944 - #46 int
INFO  19:48:19,944 - #46 arr
INFO  19:48:19,944 - #39 [
INFO  19:48:19,944 - #40 ]
INFO  19:48:19,944 - #33 ;
INFO  19:48:19,945 - #46 char
INFO  19:48:19,945 - #46 carr
INFO  19:48:19,945 - #39 [
INFO  19:48:19,945 - #40 ]
INFO  19:48:19,945 - #33 ;
INFO  19:48:19,945 - #46 bool
INFO  19:48:19,945 - #46 barr
INFO  19:48:19,946 - #39 [
INFO  19:48:19,954 - #40 ]
INFO  19:48:19,954 - #33 ;
INFO  19:48:19,954 - #46 bool
INFO  19:48:19,954 - #46 b
INFO  19:48:19,954 - #33 ;
INFO  19:48:19,954 - #6 const
INFO  19:48:19,954 - #46 int
INFO  19:48:19,954 - #46 cint
INFO  19:48:19,954 - #30 =
INFO  19:48:19,954 - #44 1
INFO  19:48:19,954 - #33 ;
INFO  19:48:19,955 - #6 const
INFO  19:48:19,955 - #46 bool
INFO  19:48:19,955 - #46 cbool
INFO  19:48:19,955 - #30 =
INFO  19:48:19,955 - #47 true
INFO  19:48:19,955 - #33 ;
INFO  19:48:19,956 - #6 const
INFO  19:48:19,956 - #46 char
INFO  19:48:19,956 - #46 cchar
INFO  19:48:19,956 - #30 =
INFO  19:48:19,956 - #45 d
INFO  19:48:19,956 - #33 ;
INFO  19:48:19,956 - #41 {
INFO  19:48:19,956 - #46 int
INFO  19:48:19,957 - #46 k
INFO  19:48:19,957 - #37 (
INFO  19:48:19,957 - #46 int
INFO  19:48:19,957 - #46 t
INFO  19:48:19,957 - #38 )
INFO  19:48:19,957 - #46 int
INFO  19:48:19,958 - #46 cint
INFO  19:48:19,958 - #33 ;
INFO  19:48:19,958 - #41 {
INFO  19:48:19,958 - #46 cint
INFO  19:48:19,958 - #30 =
INFO  19:48:19,958 - #44 1
INFO  19:48:19,958 - #33 ;
INFO  19:48:19,958 - #12 return
INFO  19:48:19,959 - #46 t
INFO  19:48:19,959 - #18 -
INFO  19:48:19,959 - #46 cint
INFO  19:48:19,959 - #33 ;
INFO  19:48:19,959 - #42 }
INFO  19:48:19,959 - #13 void
INFO  19:48:19,960 - #46 main
INFO  19:48:19,960 - #37 (
INFO  19:48:19,960 - #38 )
INFO  19:48:19,960 - #41 {
INFO  19:48:19,960 - #46 y
INFO  19:48:19,960 - #30 =
INFO  19:48:19,960 - #44 2
INFO  19:48:19,960 - #33 ;
INFO  19:48:19,961 - #46 y
INFO  19:48:19,961 - #30 =
INFO  19:48:19,961 - #46 k
INFO  19:48:19,961 - #37 (
INFO  19:48:19,961 - #46 y
INFO  19:48:19,961 - #38 )
INFO  19:48:19,961 - #17 +
INFO  19:48:19,961 - #44 3
INFO  19:48:19,962 - #33 ;
INFO  19:48:19,962 - #46 b
INFO  19:48:19,962 - #30 =
INFO  19:48:19,962 - #47 true
INFO  19:48:19,962 - #33 ;
INFO  19:48:19,962 - #46 b
INFO  19:48:19,962 - #30 =
INFO  19:48:19,962 - #44 1
INFO  19:48:19,962 - #33 ;
INFO  19:48:19,962 - #46 arr
INFO  19:48:19,962 - #30 =
INFO  19:48:19,963 - #9 new
INFO  19:48:19,963 - #46 int
INFO  19:48:19,963 - #39 [
INFO  19:48:19,963 - #46 y
INFO  19:48:19,963 - #40 ]
INFO  19:48:19,963 - #33 ;
INFO  19:48:19,963 - #46 arr
INFO  19:48:19,963 - #36 .
INFO  19:48:19,963 - #16 foreach
INFO  19:48:19,963 - #37 (
INFO  19:48:19,963 - #46 y
INFO  19:48:19,964 - #43 =>
INFO  19:48:19,964 - #41 {
INFO  19:48:19,964 - #10 print
INFO  19:48:19,964 - #37 (
INFO  19:48:19,964 - #46 y
INFO  19:48:19,964 - #38 )
INFO  19:48:19,964 - #33 ;
INFO  19:48:19,964 - #42 }
INFO  19:48:19,964 - #38 )
INFO  19:48:19,965 - #33 ;
INFO  19:48:19,965 - #46 arr
INFO  19:48:19,965 - #39 [
INFO  19:48:19,965 - #44 0
INFO  19:48:19,965 - #40 ]
INFO  19:48:19,965 - #30 =
INFO  19:48:19,965 - #18 -
INFO  19:48:19,965 - #46 arr
INFO  19:48:19,965 - #39 [
INFO  19:48:19,965 - #44 1
INFO  19:48:19,965 - #40 ]
INFO  19:48:19,965 - #17 +
INFO  19:48:19,965 - #44 3
INFO  19:48:19,965 - #33 ;
INFO  19:48:19,966 - #46 arr
INFO  19:48:19,966 - #39 [
INFO  19:48:19,966 - #44 2
INFO  19:48:19,966 - #40 ]
INFO  19:48:19,966 - #30 =
INFO  19:48:19,966 - #46 arr
INFO  19:48:19,966 - #39 [
INFO  19:48:19,966 - #44 3
INFO  19:48:19,966 - #40 ]
INFO  19:48:19,966 - #20 *
INFO  19:48:19,966 - #44 4
INFO  19:48:19,967 - #33 ;
INFO  19:48:19,967 - #46 y
INFO  19:48:19,967 - #30 =
INFO  19:48:19,967 - #46 arr
INFO  19:48:19,967 - #39 [
INFO  19:48:19,967 - #44 0
INFO  19:48:19,967 - #40 ]
INFO  19:48:19,967 - #18 -
INFO  19:48:19,968 - #46 y
INFO  19:48:19,968 - #33 ;
INFO  19:48:19,968 - #46 b
INFO  19:48:19,968 - #30 =
INFO  19:48:19,968 - #47 true
INFO  19:48:19,968 - #33 ;
INFO  19:48:19,968 - #46 cint
INFO  19:48:19,968 - #30 =
INFO  19:48:19,968 - #44 2
INFO  19:48:19,968 - #33 ;
INFO  19:48:19,968 - #46 cint
INFO  19:48:19,968 - #30 =
INFO  19:48:19,968 - #46 y
INFO  19:48:19,968 - #33 ;
INFO  19:48:19,968 - #46 cchar
INFO  19:48:19,969 - #30 =
INFO  19:48:19,969 - #45 a
INFO  19:48:19,969 - #33 ;
INFO  19:48:19,969 - #12 return
INFO  19:48:19,969 - #33 ;
INFO  19:48:19,969 - #42 }
INFO  19:48:19,970 - #42 }
INFO  19:48:19,973 - ===================================
ERROR 19:48:19,976 - Semantic error: Cannot assign value to constant field cint on line 13
INFO  19:48:19,977 - method: k defined with 1 variables and 1 parameters
ERROR 19:48:19,977 - Semantic error: type left of assign operator different from right on line 22
ERROR 19:48:19,977 - Semantic error: type left of assign operator different from right on line 23
ERROR 19:48:19,977 - Semantic error: Cannot assign value to constant field cint on line 35
ERROR 19:48:19,977 - Semantic error: Cannot assign value to constant field cint on line 36
ERROR 19:48:19,977 - Semantic error: Cannot assign value to constant field cchar on line 37
INFO  19:48:19,977 - method: main defined with 0 variables and 0 parameters
INFO  19:48:19,977 - ===================================
